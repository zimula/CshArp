OBJECT ORIENTED PROGRAMMING: OOP:
CLASSES: a class is a template for objects. 
	- have attributes and methods. 
	- example of a simple car class
		Class Car{
			string color = "red";}
OBJECTS: object are created from classes. 
	- a simple car object from the car class: "new" key word is used. 
		static void Main(string[] arg){
			Car myObj1 = new Car();
			//printing car color
			Console.WriteLine("This car is red" + myObj1.color);//output: Ths car is red
		}
CLASS MEMBERS: fields (variables and constant) and methods (actions/ functions).
	- a simple car class with 2 fields and 1 method
		Class Car{
			publc string color = "red";
			public int maxSpeed = 200;
			public void fullThrottle(){
				Console.WriteLine("The car is going as fast as it can!");
			};
		}
		
CONSTRUCTORS: method used to initialize objects from a class
	- can be used to set initial values. 
	- a simple class with a contructor
	- an example of using a contructor to set the value of a field. 
		Class Car{
			string model;
			//contructor
			publc Car(string model){
				model = "Mini";}
		}
	CONSTRUCTOR PARAMETERS: can take parameters and value assignment at instatiation. 
		Class Car{
			publc string model;
			
			//constructor
			publc Car(string model){
				this.model = model;
			}
		}
	ACCESS MODIFIERS
		PUBLIC: access from all classes. 
		PRIVATE: access only from with the class.
		PROTECTED: from class and child classes
		INTERNAL: only accessible from own assembly. 
		-  a simple example of a class with a private field
			class Car{
				private string id;
			}
			- the id can only be accessed from the class, 
			- to remedy this properties and encapsulation is needed. 
		PROPERTIES: used to control access to hidden/ private data via methods (get and set).
			get: returns a value of the field. 
			set: assigns a value to the field. 
		ENCAPSULATION: hides data from users. 
			- getting access to id from car class. 
					class Car{
						private string id;
						
						public string Id{
							get {return id}
							set {id = value}
						}
					} 
					OR shorten it by 
						class Car{
							publc id {get; set;}
						}
				
INHERITANCE: inherit fields and methods from one class to another. 
	- Derived class (child): the class that inherits.  
	- Base class (parent): the class being inherited from
	- : is used to inherit. 
	- a simple example with car inheriting from vehicle. 
			
			-the parent
		class Vehicle{
			publc string brand = "Ford";
			publc void honk(){
				Console.WriteLine("Tuut, tuut!");
			}
		}
			- the child
		class Car: Vehicle
		{	
			publc string model = "Mustang";
		}
			- testing 
		static void Main(string[] arg){
			Car myCar = new Car();
			//test parent method
			myCar.honk();
			Console.WriteLine(myCar.brand + myCar.model);
		}
		- as can be seen, the car class takes on the attributes of the vehicle class. 
		- inheritance can be blocked using "SEALED" on the parent class. 
		
POLYMORPHISM: many forms, using inherited attributes in different ways.
	- an example using animals inheriting from parent class animal
	- both pig and dog inherit from animal but use the method differently. 
		
		class Animal{
			public void animalSound(){
				Console.WriteLine("The animal makes a sound");
			}
		}
		//pig inherits from animal
		class Pig: Animal{
			publc void animalSound(){
				Console.WriteLine("The pig says: wee-wee");
			}
		}
		//dog inherits from Animal
		class Dog: Animal{
			public void animalSound(){
				Console.WriteLine("The dog says: bow wow");
			}
		}
		
OVERRIDING METHODS:
	VIRTUAL: added to the method in base class
	OVERRIDE: added to method in derived class. 
		- this allows the derived class to modify the method. 

ABSTRACTION: process of hiding some details from the user. 
			- achieve via abstract classes and interfaces. 
			- abstract classes and methods. can not create objects.
				- the methods have no body, it is provided by the derived class. 
			- abstract classes has can have both abstract and regular methods. 
			
			- a simple example of an abstract class. 
				abstract class Animal{
					publc abstract void animalSound();//abstract method body comes from child class. 
					publc void sleep(){//body on regular method
						Console.WriteLine("Zzz");
					}
				}
				- inherit from it with a pig class
				class pig: Animal{
					publc override void animalSound(){
						Console.WriteLine("makes sound");
					}
				}
				- OVERRIDE: is used to access the abstract method. 

INTERFACES: an abstract class with only abstract methods and properties (empty bodies).
	- no need for override (empty bodies)
	- inheritance from multiple interfaces.
	- a simple interface.
		
		interface IAnimal{
			void animalSound();
			void run();
		}
		-test with pig class
		class Pig: IAnimal{
			public void run(){
				console.writelline("pigs are fast")
			}
		}

ENUMS: special class that represents a group of constants. 
	enum enum_name{
		low, 
		medium,
		high
	}
	//testing
	enum_name variable = enum_name.value;

FILES: working with files. 
	- preparing the namespace: using System.IO;
	- use file class with methods: file.somefileMethod();
	- common methods: 
		i. AppendText();
		ii. Copy();
		iii. Create();
		iv. Delete();
		v. Exists();
		vi. ReadAllText();
		vii. Replace();
		viii. WriteAllText();
		more @ https://docs.microsoft.com/en-us/dotnet/api/system.io.file?view=netframework-4.8
	- WRITE AND READ FILE:
		- a simple example
		
		using System.IO;
		string writeText = "hello world"; //text to add to file
		File.WriteAllText("fileName.type", writeText); //creating file and adding text
		string readText = File.ReadAllText("fileName.type");
		Console.WriteLine(readText);
	
EXCEPTIONS: debugging your code. 
	try: defines code to be tested 
	catch: code to be executed in case of an error
		
		try{
			code to test
		}
		catch{
			code to run in case of error. 
		}
	finally: lets code execute after try and catch
	- throw can also be used to throw message if criteria fails. 
	
	
